array
동일한 자료형의 데이터를 연속된 공간에 저장해주는 자료구조
배열의 길이는 고정되어있다.
배열생성
-자료형 [] 배열이름-new 자료형[길이];
-배열이름 = new 자료형[길이];

-길이를 정해서 배열을 만들어주거나, 선언과 동시에 값을 넣어준다.
배열의 길이를 알려면 
배열명.length를 이용하면 된다.
장점
-변수의 선언을 줄여준다.
-반복문 등을 이용하여 계산과 같은 과정을 쉽게 처리

반복문에서 배열 이용
for(자료형 변수 : 배열){
	반복 실행할 문장;
}
----------------------------------------------------------------
ArrayList
크기가 변하지 않는 배열과는 달리 저장 용량을 초과한다면 자동으로
부족한 크기만큼 저장 용량이 늘어난다.
ArrayList선언
ArrayList list = new ArrayList(); object로 선언
ArrayList<Student> members = new ArrayList<Student>(); Student객체만 사용가능
ArrayList<Integer> num = new ArrayList<Integer>(); int타입만 사용가능
ArrayList<Integer> num2 = new ArrayList<>(); new에서 타입 생략가능
ArrayList<Integer> num3 = new ArrayList<Integer>(10); 초기 용량지정
ArrayList<Integer> list2 = new ArrayList<Integer>(Arrays.asList(1,2,3)); 생성시 값추가

add(Object) : 마지막에 데이터 값 추가
add(int index, Object) : index번호에 데이터를 추가
set(int index, Object) : 위치 index 번호에 있는 데이터를 변경
remove(Object) : Object의 값을 삭제
remove(int index) : index번호에 해당하는 값을 삭제
배열명.size() : 배열의 크기를 구한다.
get(int index) : 해당 index의 데이터가 출력됨
배열명.contains(Object) : 해당 데이터가 있는지 파악
배열명.indexOf(Object) : 위치 index값을 찾아주고 값이 없다면 -1을 출력

